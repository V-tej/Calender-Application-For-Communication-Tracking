{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varun\\\\calender-app\\\\src\\\\components\\\\Admin\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminDashboard() {\n  _s();\n  // State to store companies, communication methods, etc.\n  const [companies, setCompanies] = useState([]);\n  const [methods, setMethods] = useState([{\n    name: \"LinkedIn Post\",\n    sequence: 1,\n    mandatory: true\n  }, {\n    name: \"LinkedIn Message\",\n    sequence: 2,\n    mandatory: false\n  }, {\n    name: \"Email\",\n    sequence: 3,\n    mandatory: false\n  }, {\n    name: \"Phone Call\",\n    sequence: 4,\n    mandatory: false\n  }, {\n    name: \"Other\",\n    sequence: 5,\n    mandatory: false\n  }]);\n\n  // Fetch companies (API integration to your backend can be added here)\n  useEffect(() => {\n    // For now, mock data is used\n    setCompanies([{\n      name: \"Company 1\",\n      location: \"NY\",\n      communicationPeriodicity: \"2 weeks\"\n    }, {\n      name: \"Company 2\",\n      location: \"LA\",\n      communicationPeriodicity: \"1 week\"\n    }]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => alert(\"Add company logic goes here\"),\n      children: \"Add New Company\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Companies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: companies.map((company, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: company.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Communication Methods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: methods.map((method, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [method.name, \" - \", method.sequence, \" - Mandatory: \", method.mandatory ? 'Yes' : 'No']\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminDashboard, \"BYfUaru0J6Wad28bNfUAY/M5OeU=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminDashboard","_s","companies","setCompanies","methods","setMethods","name","sequence","mandatory","location","communicationPeriodicity","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","alert","map","company","index","method","_c","$RefreshReg$"],"sources":["C:/Users/varun/calender-app/src/components/Admin/AdminDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nfunction AdminDashboard() {\r\n  // State to store companies, communication methods, etc.\r\n  const [companies, setCompanies] = useState([]);\r\n  const [methods, setMethods] = useState([\r\n    { name: \"LinkedIn Post\", sequence: 1, mandatory: true },\r\n    { name: \"LinkedIn Message\", sequence: 2, mandatory: false },\r\n    { name: \"Email\", sequence: 3, mandatory: false },\r\n    { name: \"Phone Call\", sequence: 4, mandatory: false },\r\n    { name: \"Other\", sequence: 5, mandatory: false },\r\n  ]);\r\n  \r\n  // Fetch companies (API integration to your backend can be added here)\r\n  useEffect(() => {\r\n    // For now, mock data is used\r\n    setCompanies([\r\n      { name: \"Company 1\", location: \"NY\", communicationPeriodicity: \"2 weeks\" },\r\n      { name: \"Company 2\", location: \"LA\", communicationPeriodicity: \"1 week\" },\r\n    ]);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Admin Dashboard</h2>\r\n      <button onClick={() => alert(\"Add company logic goes here\")}>\r\n        Add New Company\r\n      </button>\r\n      <h3>Companies</h3>\r\n      <ul>\r\n        {companies.map((company, index) => (\r\n          <li key={index}>{company.name}</li>\r\n        ))}\r\n      </ul>\r\n      <h3>Communication Methods</h3>\r\n      <ul>\r\n        {methods.map((method, index) => (\r\n          <li key={index}>\r\n            {method.name} - {method.sequence} - Mandatory: {method.mandatory ? 'Yes' : 'No'}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}