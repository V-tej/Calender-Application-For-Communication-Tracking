{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varun\\\\calender-app\\\\src\\\\components\\\\User\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactCalendar from \"react-calendar\"; // Import the react-calendar library\nimport 'react-calendar/dist/Calendar.css'; // Import CSS for the calendar\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserDashboard() {\n  _s();\n  // Example state for communications (including past and upcoming)\n  const [communications, setCommunications] = useState([{\n    company: \"Company 1\",\n    type: \"LinkedIn Post\",\n    date: \"2023-09-01\",\n    isPast: true\n  }, {\n    company: \"Company 2\",\n    type: \"Email\",\n    date: \"2023-10-20\",\n    isPast: true\n  }, {\n    company: \"Company 3\",\n    type: \"Phone Call\",\n    date: \"2024-01-15\",\n    isPast: false\n  },\n  // upcoming\n  {\n    company: \"Company 4\",\n    type: \"LinkedIn Message\",\n    date: \"2024-02-10\",\n    isPast: false\n  } // upcoming\n  ]);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  // Group communications by dates\n  const getCommunicationsByDate = date => {\n    const formattedDate = date.toLocaleDateString();\n    return communications.filter(comm => comm.date === formattedDate);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Select a Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactCalendar, {\n        onChange: setSelectedDate,\n        value: selectedDate,\n        tileContent: ({\n          date,\n          view\n        }) => {\n          const communicationsForDate = getCommunicationsByDate(date);\n          return communicationsForDate.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [communicationsForDate.length, \" comm.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 17\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Selected Date: \", selectedDate.toLocaleDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"communications\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Communications for \", selectedDate.toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), getCommunicationsByDate(selectedDate).length > 0 ? getCommunicationsByDate(selectedDate).map((comm, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [comm.type, \" - \", comm.company]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No communications for this day.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Past Communications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: communications.filter(comm => comm.isPast).map((comm, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [comm.company, \": \", comm.type, \" on \", comm.date]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upcoming Communications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: communications.filter(comm => !comm.isPast).map((comm, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [comm.company, \": \", comm.type, \" on \", comm.date]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(UserDashboard, \"hqxFVt+uTQNd8hTmb67DYlXfUqM=\");\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useState","useEffect","ReactCalendar","jsxDEV","_jsxDEV","UserDashboard","_s","communications","setCommunications","company","type","date","isPast","selectedDate","setSelectedDate","Date","getCommunicationsByDate","formattedDate","toLocaleDateString","filter","comm","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","alignItems","onChange","value","tileContent","view","communicationsForDate","length","className","map","index","_c","$RefreshReg$"],"sources":["C:/Users/varun/calender-app/src/components/User/UserDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactCalendar from \"react-calendar\"; // Import the react-calendar library\r\nimport 'react-calendar/dist/Calendar.css'; // Import CSS for the calendar\r\n\r\nfunction UserDashboard() {\r\n  // Example state for communications (including past and upcoming)\r\n  const [communications, setCommunications] = useState([\r\n    { company: \"Company 1\", type: \"LinkedIn Post\", date: \"2023-09-01\", isPast: true },\r\n    { company: \"Company 2\", type: \"Email\", date: \"2023-10-20\", isPast: true },\r\n    { company: \"Company 3\", type: \"Phone Call\", date: \"2024-01-15\", isPast: false }, // upcoming\r\n    { company: \"Company 4\", type: \"LinkedIn Message\", date: \"2024-02-10\", isPast: false }, // upcoming\r\n  ]);\r\n\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  // Group communications by dates\r\n  const getCommunicationsByDate = (date) => {\r\n    const formattedDate = date.toLocaleDateString();\r\n    return communications.filter((comm) => comm.date === formattedDate);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Dashboard</h2>\r\n\r\n      {/* Calendar View */}\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n        <h3>Select a Date</h3>\r\n        <ReactCalendar\r\n          onChange={setSelectedDate}\r\n          value={selectedDate}\r\n          tileContent={({ date, view }) => {\r\n            const communicationsForDate = getCommunicationsByDate(date);\r\n            return (\r\n              communicationsForDate.length > 0 && (\r\n                <div>\r\n                  <span>{communicationsForDate.length} comm.</span>\r\n                </div>\r\n              )\r\n            );\r\n          }}\r\n        />\r\n        <p>Selected Date: {selectedDate.toLocaleDateString()}</p>\r\n\r\n        {/* Show communications for selected date */}\r\n        <div className=\"communications\">\r\n          <h4>Communications for {selectedDate.toLocaleDateString()}</h4>\r\n          {getCommunicationsByDate(selectedDate).length > 0 ? (\r\n            getCommunicationsByDate(selectedDate).map((comm, index) => (\r\n              <div key={index}>\r\n                <p>\r\n                  {comm.type} - {comm.company}\r\n                </p>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No communications for this day.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Past and Upcoming Communications Lists */}\r\n      <h3>Past Communications</h3>\r\n      <ul>\r\n        {communications\r\n          .filter((comm) => comm.isPast)\r\n          .map((comm, index) => (\r\n            <li key={index}>\r\n              {comm.company}: {comm.type} on {comm.date}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n\r\n      <h3>Upcoming Communications</h3>\r\n      <ul>\r\n        {communications\r\n          .filter((comm) => !comm.isPast)\r\n          .map((comm, index) => (\r\n            <li key={index}>\r\n              {comm.company}: {comm.type} on {comm.date}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserDashboard;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}