{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\varun\\\\calender-app\\\\src\\\\components\\\\Reporting\\\\ReportingDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Typography, Button, Grid, Paper } from \"@mui/material\";\nimport { Bar } from \"react-chartjs-2\"; // Import for Bar Chart\n// Chart.js (for Bar Chart)\nimport jsPDF from \"jspdf\"; // For generating PDF Reports\nimport Papa from \"papaparse\"; // For exporting to CSV\n\n// Communication data (for demonstration purposes, you can fetch this dynamically from API)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst communicationsData = [{\n  company: \"Company A\",\n  method: \"Email\",\n  response: true\n}, {\n  company: \"Company B\",\n  method: \"Phone Call\",\n  response: false\n}, {\n  company: \"Company A\",\n  method: \"LinkedIn Message\",\n  response: true\n}, {\n  company: \"Company C\",\n  method: \"Email\",\n  response: true\n}, {\n  company: \"Company B\",\n  method: \"Phone Call\",\n  response: true\n}\n// Add more data as needed\n];\n\n// Function to group communications by method\nconst getMethodFrequency = communications => {\n  const frequencies = communications.reduce((acc, comm) => {\n    acc[comm.method] = acc[comm.method] ? acc[comm.method] + 1 : 1;\n    return acc;\n  }, {});\n  const labels = Object.keys(frequencies);\n  const data = Object.values(frequencies);\n  return {\n    labels,\n    data\n  };\n};\n\n// Generate PDF Report\nconst generatePDFReport = communications => {\n  const doc = new jsPDF();\n  doc.text(\"Communications Report\", 20, 20);\n  let yPos = 30;\n  communications.forEach((comm, index) => {\n    doc.text(`${comm.company} - ${comm.method}`, 20, yPos);\n    yPos += 10;\n  });\n  doc.save(\"communication-report.pdf\");\n};\n\n// Export data to CSV\nconst exportToCSV = communications => {\n  const csv = Papa.unparse(communications);\n  const link = document.createElement(\"a\");\n  link.href = \"data:text/csv;charset=utf-8,\" + encodeURIComponent(csv);\n  link.target = \"_blank\";\n  link.download = \"communications.csv\";\n  link.click();\n};\n\n// Engagement Effectiveness (Example data for tracking successful responses)\nconst getEngagementEffectiveness = communications => {\n  const successful = communications.filter(comm => comm.response);\n  return successful.length / communications.length * 100;\n};\nconst ReportingDashboard = () => {\n  _s();\n  const [communicationMethodData, setCommunicationMethodData] = useState({\n    labels: [],\n    data: []\n  });\n  const [effectiveness, setEffectiveness] = useState(0);\n  useEffect(() => {\n    setCommunicationMethodData(getMethodFrequency(communicationsData));\n    setEffectiveness(getEngagementEffectiveness(communicationsData));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Reporting and Analytics Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        padding: 2,\n        marginBottom: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Communication Frequency Report\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: {\n          labels: communicationMethodData.labels,\n          datasets: [{\n            label: \"Frequency\",\n            data: communicationMethodData.data,\n            backgroundColor: [\"#36A2EB\", \"#FF6384\", \"#FFCE56\"]\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        padding: 2,\n        marginBottom: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Engagement Effectiveness\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"Successful Engagement: \", effectiveness.toFixed(2), \"% of communications received a response.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => generatePDFReport(communicationsData),\n          children: \"Export as PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: () => exportToCSV(communicationsData),\n          children: \"Export as CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      sx: {\n        padding: 2,\n        marginTop: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Activity Feed & Overdue Communications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: \"Recent activity will appear here, along with any overdue communication trends.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(ReportingDashboard, \"E4h9fH4mgTO0MVDIIocxpUIPtAE=\");\n_c = ReportingDashboard;\nexport default ReportingDashboard;\nvar _c;\n$RefreshReg$(_c, \"ReportingDashboard\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Button","Grid","Paper","Bar","jsPDF","Papa","jsxDEV","_jsxDEV","communicationsData","company","method","response","getMethodFrequency","communications","frequencies","reduce","acc","comm","labels","Object","keys","data","values","generatePDFReport","doc","text","yPos","forEach","index","save","exportToCSV","csv","unparse","link","document","createElement","href","encodeURIComponent","target","download","click","getEngagementEffectiveness","successful","filter","length","ReportingDashboard","_s","communicationMethodData","setCommunicationMethodData","effectiveness","setEffectiveness","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","sx","padding","marginBottom","datasets","label","backgroundColor","toFixed","container","spacing","item","color","onClick","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/varun/calender-app/src/components/Reporting/ReportingDashboard.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Container, Typography, Button, Grid, Paper } from \"@mui/material\";\r\nimport { Bar } from \"react-chartjs-2\";  // Import for Bar Chart\r\n// Chart.js (for Bar Chart)\r\nimport jsPDF from \"jspdf\"; // For generating PDF Reports\r\nimport Papa from \"papaparse\"; // For exporting to CSV\r\n\r\n// Communication data (for demonstration purposes, you can fetch this dynamically from API)\r\nconst communicationsData = [\r\n  { company: \"Company A\", method: \"Email\", response: true },\r\n  { company: \"Company B\", method: \"Phone Call\", response: false },\r\n  { company: \"Company A\", method: \"LinkedIn Message\", response: true },\r\n  { company: \"Company C\", method: \"Email\", response: true },\r\n  { company: \"Company B\", method: \"Phone Call\", response: true },\r\n  // Add more data as needed\r\n];\r\n\r\n// Function to group communications by method\r\nconst getMethodFrequency = (communications) => {\r\n  const frequencies = communications.reduce((acc, comm) => {\r\n    acc[comm.method] = acc[comm.method] ? acc[comm.method] + 1 : 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const labels = Object.keys(frequencies);\r\n  const data = Object.values(frequencies);\r\n\r\n  return { labels, data };\r\n};\r\n\r\n// Generate PDF Report\r\nconst generatePDFReport = (communications) => {\r\n  const doc = new jsPDF();\r\n  doc.text(\"Communications Report\", 20, 20);\r\n  let yPos = 30;\r\n\r\n  communications.forEach((comm, index) => {\r\n    doc.text(`${comm.company} - ${comm.method}`, 20, yPos);\r\n    yPos += 10;\r\n  });\r\n\r\n  doc.save(\"communication-report.pdf\");\r\n};\r\n\r\n// Export data to CSV\r\nconst exportToCSV = (communications) => {\r\n  const csv = Papa.unparse(communications);\r\n  const link = document.createElement(\"a\");\r\n  link.href = \"data:text/csv;charset=utf-8,\" + encodeURIComponent(csv);\r\n  link.target = \"_blank\";\r\n  link.download = \"communications.csv\";\r\n  link.click();\r\n};\r\n\r\n// Engagement Effectiveness (Example data for tracking successful responses)\r\nconst getEngagementEffectiveness = (communications) => {\r\n  const successful = communications.filter((comm) => comm.response);\r\n  return (successful.length / communications.length) * 100;\r\n};\r\n\r\nconst ReportingDashboard = () => {\r\n  const [communicationMethodData, setCommunicationMethodData] = useState({\r\n    labels: [],\r\n    data: [],\r\n  });\r\n  const [effectiveness, setEffectiveness] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setCommunicationMethodData(getMethodFrequency(communicationsData));\r\n    setEffectiveness(getEngagementEffectiveness(communicationsData));\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Reporting and Analytics Dashboard\r\n      </Typography>\r\n      \r\n      {/* Communication Frequency Report */}\r\n      <Paper sx={{ padding: 2, marginBottom: 4 }}>\r\n        <Typography variant=\"h6\">Communication Frequency Report</Typography>\r\n        <Bar\r\n          data={{\r\n            labels: communicationMethodData.labels,\r\n            datasets: [{\r\n              label: \"Frequency\",\r\n              data: communicationMethodData.data,\r\n              backgroundColor: [\"#36A2EB\", \"#FF6384\", \"#FFCE56\"],\r\n            }],\r\n          }}\r\n        />\r\n      </Paper>\r\n\r\n      {/* Engagement Effectiveness Dashboard */}\r\n      <Paper sx={{ padding: 2, marginBottom: 4 }}>\r\n        <Typography variant=\"h6\">Engagement Effectiveness</Typography>\r\n        <Typography variant=\"body1\">\r\n          Successful Engagement: {effectiveness.toFixed(2)}% of communications received a response.\r\n        </Typography>\r\n      </Paper>\r\n\r\n      {/* Export Buttons */}\r\n      <Grid container spacing={2}>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => generatePDFReport(communicationsData)}\r\n          >\r\n            Export as PDF\r\n          </Button>\r\n        </Grid>\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => exportToCSV(communicationsData)}\r\n          >\r\n            Export as CSV\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Overdue Communications & Activity Feed (For expansion) */}\r\n      <Paper sx={{ padding: 2, marginTop: 4 }}>\r\n        <Typography variant=\"h6\">Activity Feed & Overdue Communications</Typography>\r\n        {/* You can add a dynamic feed here based on incoming data */}\r\n        <Typography variant=\"body2\">\r\n          Recent activity will appear here, along with any overdue communication trends.\r\n        </Typography>\r\n      </Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReportingDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}